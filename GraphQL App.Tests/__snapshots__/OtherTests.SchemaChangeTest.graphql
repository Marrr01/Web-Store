schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

interface Error {
  message: String!
}

type AddProductPayload {
  product: Product
}

type Basket {
  isPurchased: Boolean!
  purchaseDate: DateTime
  isDelivered: Boolean!
  deliveryDate: DateTime
  user: User!
  basketProducts: [BasketProduct!]
  id: UUID!
}

type BasketProduct {
  productAmount: Float!
  basketId: UUID!
  basket: Basket!
  productId: UUID!
  product: Product!
}

type ChangePasswordPayload {
  user: User
  errors: [ChangePasswordError!]
}

type Mutation {
  changePassword(input: ChangePasswordInput!): ChangePasswordPayload!
  addProduct(input: AddProductInput!): AddProductPayload!
}

type NullReferenceError implements Error {
  message: String!
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Product {
  name: String!
  description: String
  price: Float!
  image: [Byte!]
  basketsProduct: [BasketProduct!]
  id: UUID!
}

"A connection to a list of items."
type ProductsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ProductsEdge!]
  "A flattened list of the nodes."
  nodes: [Product!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ProductsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Product!
}

type Query {
  users: [User!]!
  baskets: [Basket!]!
  basketsProducts: [BasketProduct!]!
  products("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: ProductFilterInput order: [ProductSortInput!]): ProductsConnection
}

type Subscription {
  productAdded: Product!
  passwordChanged: User!
}

type User {
  login: String!
  password: String!
  email: String
  isAdmin: Boolean!
  name: String
  surname: String
  age: Int
  baskets: [Basket!]
}

union ChangePasswordError = NullReferenceError

input AddProductInput {
  newProduct: ProductInput!
}

input BasketFilterInput {
  and: [BasketFilterInput!]
  or: [BasketFilterInput!]
  isPurchased: BooleanOperationFilterInput
  purchaseDate: DateTimeOperationFilterInput
  isDelivered: BooleanOperationFilterInput
  deliveryDate: DateTimeOperationFilterInput
  user: UserFilterInput
  basketProducts: ListFilterInputTypeOfBasketProductFilterInput
  id: UuidOperationFilterInput
}

input BasketInput {
  isPurchased: Boolean!
  purchaseDate: DateTime
  isDelivered: Boolean!
  deliveryDate: DateTime
  user: UserInput!
  basketProducts: [BasketProductInput!]
  id: UUID!
}

input BasketProductFilterInput {
  and: [BasketProductFilterInput!]
  or: [BasketProductFilterInput!]
  productAmount: FloatOperationFilterInput
  basketId: UuidOperationFilterInput
  basket: BasketFilterInput
  productId: UuidOperationFilterInput
  product: ProductFilterInput
}

input BasketProductInput {
  productAmount: Float!
  basketId: UUID!
  basket: BasketInput!
  productId: UUID!
  product: ProductInput!
}

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

input ByteOperationFilterInput {
  eq: Byte
  neq: Byte
  in: [Byte]
  nin: [Byte]
  gt: Byte
  ngt: Byte
  gte: Byte
  ngte: Byte
  lt: Byte
  nlt: Byte
  lte: Byte
  nlte: Byte
}

input ChangePasswordInput {
  login: String!
  oldPass: String!
  newPass: String!
}

input DateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime]
  nin: [DateTime]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input FloatOperationFilterInput {
  eq: Float
  neq: Float
  in: [Float]
  nin: [Float]
  gt: Float
  ngt: Float
  gte: Float
  ngte: Float
  lt: Float
  nlt: Float
  lte: Float
  nlte: Float
}

input IntOperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input ListByteOperationFilterInput {
  all: ByteOperationFilterInput
  none: ByteOperationFilterInput
  some: ByteOperationFilterInput
  any: Boolean
}

input ListFilterInputTypeOfBasketFilterInput {
  all: BasketFilterInput
  none: BasketFilterInput
  some: BasketFilterInput
  any: Boolean
}

input ListFilterInputTypeOfBasketProductFilterInput {
  all: BasketProductFilterInput
  none: BasketProductFilterInput
  some: BasketProductFilterInput
  any: Boolean
}

input ProductFilterInput {
  and: [ProductFilterInput!]
  or: [ProductFilterInput!]
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  price: FloatOperationFilterInput
  image: ListByteOperationFilterInput
  basketsProduct: ListFilterInputTypeOfBasketProductFilterInput
  id: UuidOperationFilterInput
}

input ProductInput {
  name: String!
  description: String
  price: Float!
  image: [Byte!]
  basketsProduct: [BasketProductInput!]
  id: UUID!
}

input ProductSortInput {
  name: SortEnumType
  description: SortEnumType
  price: SortEnumType
  id: SortEnumType
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input UserFilterInput {
  and: [UserFilterInput!]
  or: [UserFilterInput!]
  login: StringOperationFilterInput
  password: StringOperationFilterInput
  email: StringOperationFilterInput
  isAdmin: BooleanOperationFilterInput
  name: StringOperationFilterInput
  surname: StringOperationFilterInput
  age: IntOperationFilterInput
  baskets: ListFilterInputTypeOfBasketFilterInput
}

input UserInput {
  login: String!
  password: String!
  email: String
  isAdmin: Boolean!
  name: String
  surname: String
  age: Int
  baskets: [BasketInput!]
}

input UuidOperationFilterInput {
  eq: UUID
  neq: UUID
  in: [UUID]
  nin: [UUID]
  gt: UUID
  ngt: UUID
  gte: UUID
  ngte: UUID
  lt: UUID
  nlt: UUID
  lte: UUID
  nlte: UUID
}

enum SortEnumType {
  ASC
  DESC
}

"The `Byte` scalar type represents non-fractional whole numeric values. Byte can represent values between 0 and 255."
scalar Byte

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

scalar UUID @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc4122")